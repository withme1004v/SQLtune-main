#########################################
    mysql 접근하기 
#########################################

mysql -u root -p --port=3306
Enter your password : 1234


##########################################################################
1.디비생성하기 -- 한글이 깨지면 안된다. 한글의 경우 문자셋을 반드시 이렇게 맞춰야 한다 
##########################################################################

create database mydb default character set utf8 collate utf8_general_ci;


##########################################################################
2.계정생성하기 
##########################################################################

create user 'user01'@'localhost'  identified by '1234';

###########################################################################
3. 접근권한부여하기 (localhost만 가능하다 )
###########################################################################

grant all privileges  on mydb.* TO user01@localhost; 

exit;


mysql -u user01 -p --port=3306

#########################################################################
4. 데이터베이스 확인하기 
#########################################################################

show databases;

use 디비명; 

use sakila;
show tables;

desc actor;

use world;
show tables;

테이블 구조 확인하기 
desc city;
desc country;
desc countrylanguage;

######################################################################
5.테스트데이터 생성하기
######################################################################

demobld.sql이 있는 폴더로 이동한다 
cmd 
cd C:\내자료\MYSQL\SQLtune-main\SQLtune-main\data    이 폴더에 demobld.sql이 필요하다 

이 파일이 있는 디렉토리로 이동해야 한다 

mysql -u user01 -p < demobld.sql         
mysql -u user01 -p  --mysql 실행하기    

show databases;  -- user01 계정이 접근권한있는 디비만 보인다. 

use mydb;   -- 사용자 db 옮기기

show tables;

-- 전체 목록 확인하기 
select * from emp; 

-- 실행계획 확인하기 
explain select * from emp;

#######################################
MySQL 기본 명령어 
#######################################

#primary key 부여하기 

alter table emp add primary key(empno); -- empno가 primary key조건을 만족해야 한다. 
show index from emp;

alter table emp drop primary key;  
show index from emp;

#dept 테이블에 먼저 primary key를 지정하거나 unqiue 제약조건을 걸어야 한다. 
alter table dept add constraint primary key (deptno);

alter table emp add constraint fk_emp_dept foreign key(deptno)  references dept(deptno);

show index from emp;
show index from dept;

########################### 기본 조회 쿼리 #################

select * from emp;
select * from dept;
select * from salgrade;
select * from bonus;

#데이터가 많을 경우에는 하루종일 스크롤 할 수 있으므로 우선은 데이터 개수를 먼저 세보는 것이 좋다 






#와일드카드(_)

SELECT * FROM EMP
WHERE ENAME LIKE '__A%';   -- 밑줄문자 두개임 

SELECT *
FROM EMP
WHERE ENAME NOT LIKE '%A%';

#null값처리 : isnull, isnotnull

SELECT * FROM EMP WHERE COMM=NULL;  -- 인식못함 

SELECT * FROM EMP WHERE COMM is null;

SELECT * FROM EMP WHERE COMM is not null;


limit 
select * from emp limit 0, 3;
select * from emp limit 3, 3;
select * from emp limit 6, 3;



드라이빙빙
항목	우선순위
작은 테이블 먼저 (드라이빙 테이블)	✅ 좋음
조건으로 필터링 가능한 테이블 먼저	✅ 좋음
인덱스가 잘 구성된 테이블은 드리븐으로	✅ 좋음
카디널리티(결과 다양성)가 높은 테이블을 드라이빙으로














###################  기존의 디비의 문자셋이 깨져서 한글이 안보일 경우의 처리 방안 #####################

mysql -u root -p --port=3306 \
1234
ALTER  DATABASE  employees DEFAULT CHARACTER SET utf8 ;

--문자셋 설정 
alter table guestbook convert to character set utf8;
insert into guestbook (title, writer, contents,wdate)
values('제목1','작성자1',  '내용1', now());
select * from guestbook;

drop table guestbook;

DDL(Data Definition Language)- create, drop, alter 
DCL (Data Control Language) - grant,revoke  
DML(Data Manipulation Languagㅕㄴe)-insert, update, delete, select  

############### 새로운 자료 #################################
cd C:\내자료\MYSQL\SQLtune-main\SQLtune-main\test_db-master
mysql -u root -p < employees.sql 

show databases;  -- 데이터베이스 전체 목록 확인
use employees;   -- 디비변경 

show tables;     -- 전체 테이블 목록 보기 


desc employees;  -- 테이블 구조 확인 명령어 

select * from 테이블명;


select emp_no, first_name from employees ; -- 데이터가 많아서 오래 걸림  

--전체 데이터 개수 알아보기 
select count(*) from employees;  -- 30024개

-- limit 데이터를 원하는 만큼만 추출하고자 할때 
-- mysql만 , 오라클 rownum, mssql top 
select * from employees
limit 0, 10;

select * from employees where first_name ='Parto';
--데이터는 대소문자를 구분하는 경우가 일반적 
select * from employees where first_name ='PARTO';

-- first_name 이 parto 고 성별이 여자인사람

select * from employees 
where first_name ='PARTO' and gender='F';

select * from employees 
where first_name ='PARTO' 
and gender='F' and hire_date='1987-02-19';

-- 데이터베이스는 0번부터가 아니고 1부터 한다, 
-- substring 함수연습, mysql 은 from 절이 없어도 상관없다 
select substring('1987-02-19', 1, 4);

select * 
from employees 
where first_name ='PARTO' and gender='F' 
and substring(hire_date, 1,4)='1987';

-- first_name 이 parto고 성별 여자고 1987, 1989입사한사람 

select * 
from employees 
where first_name ='PARTO' and gender='F' 
and (substring(hire_date, 1,4)='1987'
or substring(hire_date, 1,4)='1989');

-- 1952년도에 태어나서 입사한 여자가 몇명인가 
select count(*) from employees where substring(birth_date,
1,4)='1952';

-- 이름이 Ra로 시작하는 사람이고 여자인 사람이고 1955년생
select * 
from employees 
where first_name like 'Ra%' and gender='F' and substring(birth_date,1,4)='1955';

-- 이름이 ra로 끝나는 사람 
select * 
from employees 
where first_name like '%Ra' and gender='F' and substring(birth_date,1,4)='1955';

-- 
 desc 

-- http://cafe.daum.net/GOMFC
-- http://bitly.kr/3MFu3YvwzMR!

-- http://bitly.kr/3MFu3YvwzMR

--기존의 디비가 있으면 삭제하라 
drop database if exists sqldb;
--새로 만들어라 
CREATE DATABASE IF NOT EXISTS sqldb;
--사용준비 
USE sqlDB;
CREATE TABLE userTbl -- 회원 테이블
( userID   NVARCHAR(8) NOT NULL PRIMARY KEY, -- 사용자아이디
  name     NVARCHAR(10) NOT NULL, -- 이름
  birthYear   INT NOT NULL,  -- 출생년도
  addr    NCHAR(2) NOT NULL, -- 지역(경기,서울,경남 식으로 2글자만입력)
  mobile1 CHAR(3), -- 휴대폰의 국번(011, 016, 017, 018, 019, 010 등)
  mobile2 CHAR(8), -- 휴대폰의 나머지 전화번호(하이픈제외)
  height     SMALLINT,  -- 키
  mDate     DATE  -- 회원 가입일
);
GO
CREATE TABLE buyTbl -- 회원 구매 테이블
( num INT AUTO_INCREMENT NOT NULL PRIMARY KEY, -- 순번(PK)
userID NVARCHAR(8) NOT NULL, -- 아이디(FK)
prodName NVARCHAR(6) NOT NULL, -- 물품명
groupName NVARCHAR(4), -- 분류
price INT NOT NULL, -- 단가
amount SMALLINT NOT NULL, -- 수량
FOREIGN KEY buyTbl(userID) REFERENCES userTbl(userID)
);

GO
INSERT INTO userTbl VALUES('LSG', '이승기', 1987, '서울', '011', '1111111', 182, '2008-8-8');
INSERT INTO userTbl VALUES('KBS', '김범수', 1979, '경남', '011', '2222222', 173, '2012-4-4');
INSERT INTO userTbl VALUES('KKH', '김경호', 1971, '전남', '019', '3333333', 177, '2007-7-7');
INSERT INTO userTbl VALUES('JYP', '조용필', 1950, '경기', '011', '4444444', 166, '2009-4-4');
INSERT INTO userTbl VALUES('SSK', '성시경', 1979, '서울', NULL  , NULL      , 186, '2013-12-12');
INSERT INTO userTbl VALUES('LJB', '임재범', 1963, '서울', '016', '6666666', 182, '2009-9-9');
INSERT INTO userTbl VALUES('YJS', '윤종신', 1969, '경남', NULL  , NULL      , 170, '2005-5-5');
INSERT INTO userTbl VALUES('EJW', '은지원', 1972, '경북', '011', '8888888', 174, '2014-3-3');
INSERT INTO userTbl VALUES('JKW', '조관우', 1965, '경기', '018', '9999999', 172, '2010-10-10');
INSERT INTO userTbl VALUES('BBK', '바비킴', 1973, '서울', '010', '0000000', 176, '2013-5-5');
INSERT INTO buyTbl VALUES(NULL, 'KBS', '운동화', NULL, 30, 2);
INSERT INTO buyTbl VALUES(NULL, 'KBS', '노트북', '전자', 1000, 1);
INSERT INTO buyTbl VALUES(NULL, 'JYP', '모니터', '전자', 200, 1);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '모니터', '전자', 200, 5);
INSERT INTO buyTbl VALUES(NULL, 'KBS', '청바지', '의류', 50, 3);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '메모리', '전자', 80, 10);
INSERT INTO buyTbl VALUES(NULL, 'SSK', '책' , '서적', 15, 5);
INSERT INTO buyTbl VALUES(NULL, 'EJW', '책' , '서적', 15, 2);
INSERT INTO buyTbl VALUES(NULL, 'EJW', '청바지', '의류', 50, 1);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '운동화', NULL , 30, 2);
INSERT INTO buyTbl VALUES(NULL, 'EJW', '책' , '서적', 15, 1);
INSERT INTO buyTbl VALUES(NULL, 'BBK', '운동화', NULL , 30, 2);
SELECT * FROM userTbl;
SELECT * FROM buyTbl;
--USE tempdb;
--BACKUP DATABASE sqlDB TO DISK = 'C:\SQL\sqlDB2016.bak' WITH INIT ;


--mysql  클라이언트 프로그램 
mysql -u root -p --port=3306

--데이터베이스 확인
show databases;
use sqldb;   
show tables;
desc usertbl; --  dbms 공통
desc buyTbl;

-- usertbl의 데이터 조회 
 select * from usertbl;

--usertbl에서   addr필드값이 서울인 사람만 
select * from usertbl where addr='서울';

--buytbl에서 num 이 1인 데이터 
select * from buytbl where  num=1;
select * from buytbl where  num='1';
-- 숫자 데이터의 경우에는 '' 를 해도 되고 안해도 된다. 
-- 문자 데이터는 꼭 ''로 감싸야 한다 

select * from usertbl where name='김경호';

-- 관계연산자  > < >= <= == != <>, 논리연산자: and or not 
select userID, name from userTbl where birthyear>=1970 and height>=182;

--1970년이후에 태어났거나 키가 182 이상인 사람 
select userID, name from userTbl where birthyear>=1970 or height>=182;

-- 1. buytbl에서 groupname이 전자이거나 서적인경우의 num, prodName, price만 
select num, prodName, price from buytbl where groupname ='전자' or 
groupname='서적';

-- 2. usertbl에서 태어난 해가 1970년 미만인 사람들의 정보 
select * from usertbl where birthyear<1970;
/*
employees에서
use employees;
*/
-- 3. employees 테이블에서 last name 'Peac' 이고, 성별이 'M'이고 태어난 해가 
      1952년인 사람들 정보 

      select * from employees where last_name='Peac' and gender='M' 
      and substring(birth_date,1,4) = '1952'

-- 4. employees 테이블에서 1953년도에 입사한 남자들 숫자 
  select count(*) from employees where gender='M' and 
  substring(hire_date,1,4)='1953';
-- 5. employees 테이블에서 1956년도에 입사한 여자들 숫자 
select count(*) from employees where gender='F' and 
  substring(hire_date,1,4)='1956';
  
use sqldb;
select name, height from usertbl 
where height>=180 and height<=183;

-- between 연산자 값을 포함한다 
select name, height from usertbl 
where height between 180 and 183;


select num, prodName, price from buytbl where groupname  in('전자', '서적');
select name, addr from usertbl where addr in ('서울', '경북', '전남')

select * from buytbl where num in (1,3,5,6)

use employees;
select * from employees where emp_no in (10000,10001,10006,10010) 
or emp_no in (20000, 20001, 20002);

-- like 연산자 와일드카드(_, %) _ : 이 자리에 한글자 어떤 글자든 상관없다 
-- % 는 여러개의 문자  %% - 모든 데이터 
use sqldb;
select * from usertbl where name like '윤_신'; 
select * from usertbl where name like '김%';
select * from usertbl where name like '이%';
select * from usertbl where name like '%신%'; --   이름에 신짜가 들어가는 사람 

--  김경호의 키보다 큰사람, 1.김경호 키  2.김경호보다 큰사람 
1)select height from usertbl where name='김경호';
2)select name, height from usertbl where height>177;

-- 두개의 쿼리를 결합하자. 원쿼리에 덧붙임쿼리 - 서브쿼리 
-- 서브쿼리 먼저 실행되고, 그 결과를 가지고  메인 쿼리가 실행된다. 
select name, height from usertbl where height>
(select height from usertbl where name='김경호')

-- 서브쿼리 : select, from, where에 각각 올 수 있다 
 select 문에서 사용될때는 스칼라 서브쿼리라고 해서 , 다른 테이블서 
        데이터를 가져올때 주로 쓴다.   join 연산이나 함수를 대체할 수 있다 
        실행결과가 null 이거나 하나이하여야 한다. 
        절대 여러개의 결과가 오면 안된다. 

  from절에서 사용될때는 가상뷰의 의미로 사용된다. 많이 쓰임 
        보통 서브쿼리의 실행결과가 여러개 오게 된다. 
        
  where절 - 실행결과값이 null이거나 하나일때와,여러개일때 각각 처리방법이 많이 
            다르다. 

select height from usertbl where addr ='경남';
  
select name, height from usertbl where height>
(select height from usertbl where addr ='경남');
ERROR 1242 (21000): Subquery returns more than 1 row
서브쿼리 결과값이 한행 이상이 나와서 사용불가 
170 보다 크거나 173 보다 큰 사람들 
select name, height from usertbl where height>ANY
(select height from usertbl where addr ='경남');

ANY, some :  부등호 or  부등호 or  부등호 or 
in  :  등호  or  등호 or 등호 or ...
all : 부등호  and 부등호 and 부등호 and 

select name, height from usertbl where height>
(select min(height) from usertbl where addr ='경남')

all : max 함수 사용 

-- select  절에 스칼라 서브쿼리 
-- buytbl에는 구입한 사람 id밖에 없음, 이름, 주소, 전화번호가 같이 출력되길 
'kbs'아이디를 가지고 이름을 가져오자 
select name from usertbl where userid='KBS';

select num, prodName, price, amount, userid,
(select name from usertbl where userid='KBS') as name 
from buytbl;

--이름, 주소등 가져올 필드가 많으면 성능이떨어진다. 
--join  연산을 수행한다. 
select num, prodName, price, amount, userid,
(select name from usertbl where userid=buytbl.userid) as name 
,(select addr from usertbl where userid=buytbl.userid) as addr 
from buytbl;

--각 사용자들이 얼마나 물건을 샀는지 확인하려고 한다 
select count(*) from buytbl where userid='kbs';

select userid, name, addr,
(select count(*) from buytbl where userid=usertbl.userid)  cnt
from usertbl;

-- from절의 경우 데이터개수가 많이 오는 서브쿼리 
use employees;

select * from 
(
  select substring(birth_date, 1, 4) birthyear, 
  emp_no, first_name, last_name, birth_date, 
  gender, hire_date
  from employees where gender='M'
) A  where A.birthyear = '1964' and A.first_name like 'p%;

--from절에 오는 쿼리에 대해서 인라인뷰 라고 한다 
--뷰 

-- ailasing : 테이블명이나 컬럼에 새로운 이름을 부여한다. 
as  새로운이름 
테이블명 - 64자, 오라클 25, mssql 255 
select userid, name, addr,
(select count(*) from buytbl a where a.userid=b.userid)  cnt
from usertbl b;

use sqldb;
select userid, name, addr,
(select count(*) from buytbl where userid=usertbl.userid)  cnt
from usertbl
order by cnt desc, name asc;
카운트가 같을때는 이름은 오른차순으로 정렬하라 
asc -- 오름차순(작은거부터 큰거 순서대로) default
desc--내림차순

select addr from usertbl;

--중복된 값 배제 
select distinct addr from usertbl;

select distinct name, addr from usertbl;

use employees;
select emp_no, hiredate from employees
order by hire_date asc 
limit 0, 5;

--limit 시작, 개수 

select emp_no, hiredate from employees
order by hire_date asc 
limit 5, 5;

--1 페이지 
select emp_no, hiredate from employees
order by hire_date asc 
limit 0, 10;

--2페이지
select emp_no, hiredate from employees
order by hire_date asc 
limit 10, 10;

--3페이지
select emp_no, hiredate from employees
order by hire_date asc 
limit 20, 10;

use sqldb;
create table user (select * from usertbl);
create table user2 as select * from usertbl;
show tables;
select * from user;

--구조만 복사하기 
create table user3 as select * from usertbl where 1=0; 
select count(*) from user3;

-- 그룹함수 사용하기 -  avg(평균), sum(합계), std(표준편차), max, min, count 

select sum(price), avg(price), max(price), min(price), count(price)
from buytbl;

--1. 컬럼에 null값이 있을때는  계수를 못한다. 
     null  은 무정형, 모른다 수학적 무한대 

--  필드에  AUTO_INCREMENT 속성이 있으면 반드시 이 필드가 primary key가 
   되어야 한다. ( AUTO_INCREMENT- mysql만 있다 )
     create table WeekPay
     ( id int not null AUTO_INCREMENT, 
       name nvarchar(20) not null,
       week_time int, 
       per_pay int,
       primary key (id) 
     );

    insert into weekpay(name, week_time, per_pay) values 
    ( '이승기', 40, 20000);
    insert into weekpay(name, week_time, per_pay) values 
    ( '조용필', 30, 50000);
    insert into weekpay(name, week_time, per_pay) values 
    ( '김범수', 20, 30000);
    insert into weekpay(name, week_time, per_pay) values 
    ( '김경호', 40, 20000);
    insert into weekpay(name) values ( '성시경');
    insert into weekpay(name, week_time, per_pay) values 
    ( '임재범', null, null);
    insert into weekpay(name, week_time, per_pay) values 
    ( '조관우', null, null);
    insert into weekpay(name, week_time, per_pay) values 
    ( '조승연', null, null);
    
    select id, name, week_time, per_pay, week_time * per_pay as per_pay
    from weekpay;

    -- 필드 추가 
    alter table weekpay add column deptno char(2);
    update weekpay set deptno=10 where id in (1,3,4);
    update weekpay set deptno=20 where id not in (1,3,4);

    -- select sum(week_time) from weekpay;  : null값 빼고 연산
    -- select count(week_time) from weekpay;
    select count(*) from weekpay;
    select max(week_time) from weekpay;  -- dbms  null값 처리방식 다르다  
    select min(week_time) from weekpay;

    --내 개인 급여와 우리 부서의 최대급여를 비교
     내이름  내급여  부서평균급여 


    select name, week_time*per_pay, ( select avg(week_time*per_pay)
    from weekpay) as average  
    from weekpay;

    -- 오라클 윈도우함수를   avg(수식) over()
    select name, week_time*per_pay, avg(week_time*per_pay) 
    from weekpay;

    select name, deptno, week_time*per_pay, avg(week_time*per_pay) 
    from weekpay
    group by deptno;

--where 조건절에는 group함수를 사용할 수 없다. 
   select userid, sum(price*amount)
   from buytbl
   where sum(price*amount)>1000
   group by userid;

   select userid, sum(price*amount)
   from buytbl
   group by userid
   having sum(price*amount)>1000;


  select userid, price 
  from ( 
    select userid, sum(price*amount) price
    from buytbl
    group by userid
  )A where price>1000;


  select num, groupName, sum(price*amount) as '비용'
  from buytbl
  group by groupName, num;

  select num, groupName, sum(price*amount) as '비용'
  from buytbl
  group by groupName, num
  with rollup;

연습문제1.
emp_no, first_name, last_name   
을 태어난연도로 오름차순하여, 5개만 출력하기 

연습문제2.
emp_no, first_name, last_name, title(현직, titles테이블에 있음)   
을 태어난연도로 오름차순하여, 5개만 출력하기 

desc employees;
desc titles;
select * from titles limit 10;

select distinct emp_no, title from titles limit 10;-- 못씀 

select emp_no, max(title), to_date from titles 
group by emp_no 
limit 10;

select emp_no, title from titles 
where to_date='9999-01-01'
limit 10;

select * from 
(
  select emp_no, first_name, last_name, birth_date,
  (select  title from titles where to_date='9999-01-01' 
  and titles.emp_no=employees.emp_no) title
  from employees 
)A
where title is not null
order by birth_date asc
limit 5;







select emp_no, gender, 
(select max(title) from titles A where A.emp_no=B.emp_no) title
from employees B
limit 4

use sqldb 
create table testtbl( id int, username nvarchar(3), age int);

insert into testtbl values(1, 'tom', 12);
insert into testtbl values(2, 'jane', 12);
insert into testtbl values(3, '홍길동', 15);
insert into testtbl values(4, '을지문덕', 25);

AUTO_INCREMENT 안쓰고 자동증가 구현
select max(id)+1 from testtbl;
insert into testtbl values(5, '강감찬', 24);

필드를 지정할때 최소한도로 not null 조건인 경우에는 다 기술해야 한다 
insert into testtbl(id, username) values(6, '김영아');

데이터에 특수문자들 ' % _ > <  > ->  &lt; 
 nia 정보화진흥원  웹접근성 

'Tom''s company' 

create table testtbl2( id int, username nvarchar(20), age int);
insert into testtbl2 values (1, 'Tom's company', 44); ' ;
insert into testtbl2 values (1, 'Tom''s company', 44);
insert into testtbl2 values (2, '''myworld''', 44);
primary key - unique + not null

회원테이블 
회원아이디    사용자아이디 
1              user01 
2              user02 

create table test1(id int AUTO_INCREMENT primary key, 
                  text nvarchar(20));

insert into test1 values(null,'추가1');
insert into test1 (text) values('추가2');
select last_insert_id();

데이터베이스 전환
use employees;
테이블 구조만 복사한다 -  제약조건은 복사가 안된다.(primary key, foreign key...)
create table emp as select * from employees where 1=0; 
desc emp;
select count(*) from emp; 

insert into emp select * from employees where emp_no<=10050;

select * from emp;

update emp set last_name='None';
delete from emp; 
insert into emp select * from employees where emp_no<=10050;


10001 | 1953-09-02 | Georgi     | Facello     | M      | 1986-06-26
update emp set hire_date='1999-06-26' where emp_no=10001;
select  * from emp limit 5;

use sqldb;
update buytbl set price = price*1.5;

delyn 이라는 새로운 필드 추가하기 
alter table buytbl add column delyn char(1);
update buytbl set delyn='N' where num in(1,3,5,7,9);

-- 그룹이름을 의류 -> 잡화로 수정하기 
update buytbl set groupname='잡화'  where groupname='의류';

create table buy1 as select * from buytbl;

delete from buy1 where groupname='잡화';
delete from buy1 where delyn='NULL';

-- NULL  은 = 등호연산자 작동 안됨, is, is not  
 select * from buy1 where delyn=NULL;
 select * from buy1 where delyn is NULL;
 
 delete from buy1 where delyn is null;

트랜잭션
- 두개이상의 쿼리가 협력해서 하나의 결과를 만들어야 할때 
은행거래, 예약시스템,  

우리은행          -> 하나은행 
10만원 보냈고         10만원받았다 

최소(원상복구-rollback),    확정(commit)


auto commit -  자동확정 

--  트랜잭션을 이용해서 삭제 내용을 복원시켜보자 

start transaction; 
delete from buy1;
select * from buy1;
rollback;
select * from buy1;

drop table bigtbl1;
drop table bigtbl3;

create table bigtab1 as select * from employees.employees;
create table bigtab2 as select * from employees.employees;
create table bigtab3 as select * from employees.employees;

start transaction;
delete from bigtab1;
rollback;

-- dml사용하다가  ddl 쓰면 자동 커밋상태 
drop table bigtab2;
truncate table bigtab3;

부호가 없을때   0 ~ 255     11111111 ~ 00000000
부호가 있을때   2의보수(첫번째비트가 1이면 음수, 0이면 양수 )
               양수        00000000 ~ 01111111 0~127 
               음수        11111111 ~ 10000000   -128~-0
                          -128 ~ 127
                          - 2의 n-1승 ~ 2 의 n-1 승 - 1

float, double  지수형식으로 

select '2020-08-05' + 5;

cast(문자열 as 새로운타입명)

select cast('2020-08-05' as date) + 5;
select cast('abc' as date);
select '123' + '45'; --자동 형변환  문자열 -> int로 바꾸어서 연산 \
select cast('123' as int) + 5; --  강제형전환 

-- mssql convert oracle, to_char, to_int, to_date

select 'mysql' + ' is a DBMS';
select concat('mysql', ' is a DBMS');

select if(조건식,  true일때처리, false일때처리);

use employees;
select concat(first_name, ' ', last_name) name 
from employees limit 5;

use sqldb;
select if(delyn='N', '삭제안함', '삭제')  from buytbl;

select * from weekpay;

update weekpay set week_time=30, per_pay=3000 
where week_time is null;

보너스 필드를 하나 만들자 
alter table weekpay add column bonus int;
update weekpay set bonus=300000 where id in(1,3,5,7,9);

select name, (week_time  * per_pay + bonus) as pay  
from weekpay;

select name, (week_time  * per_pay + ifnull(bonus, 0)) as pay  
from weekpay;

select nullif(100,100), nullif(100,200);

 
선택적분기를 할때 사용한다. 
10- 마케팅부, 20-인사부

case 필드명  when 값1 then 전달하고자하는값1
            when 값2 then 전달하고자하는값2
            ...
            else '그밖의처리'
end as '새로운필드명' 

select case deptno when 10 then '마케팅부' 
                  when 20 then '인사부'
                  else '홍보부'
        end dept  from weekpay; 


select ascii('a'), ascii('A');
select length('abc'), length('가나다');
--               1, 2,3 
select elt(2, '하나', '둘', '셋');
select field('셋', '하나', '둘', '셋');
select find_in_set('셋', '하나,둘,셋');

create table test2(id int, 
 field1 nvarchar(30),
 field2 nvarchar(30),
 field3 nvarchar(30),
 field4 nvarchar(30));

insert into test2 values(1, '하나', '둘', '셋', 
   '하나,둘,셋,넷');

select elt(2, field1, field2, field3)  from test2; 
select field('셋', field1, field2, field3)  from test2; 
select find_in_set('둘', field4)  from test2;

select format(22333444, 0);

select  ltrim('   test    ');
select  rtrim('   test    ');
select  trim('   test    ');

select substring('2020-08-06', 1,4) year, 
       substring('2020-08-06', 6,2) month, 
       substring('2020-08-06', 9,2) day;

--현재날짜 
select curdate();
select curtime();
select sysdate();
select now();

select adddate(now() , interval 3 day);
select adddate(now() , interval -3 day);

select adddate(now() , interval 6 month);
select adddate(now() , interval 3 year);

select datediff('2020-08-31', '2020-08-05');

select datediff('2020-08-31', curdate());
select last_day(curdate()); 

--오늘부터 말일까지 몇일 남았는지 확인
select datediff(last_day(curdate()), curdate()) as diff;

--요일 일:0, 월1 화2 수3 목4 금5 토6 
select dayofweek(curdate());

-- 오늘이 무슨 요일인가?
select case dayofweek(curdate()) 
            when 1 then '일요일'
            when 2 then '월요일'
            when 3 then '화요일'
            when 4 then '수요일'
            when 5 then '목요일'
            when 6 then '금요일'
            else '토요일'
      end as weekday; 




테이블과 테이블   1:1    기본정보랑 장학금 주는데 필요한 정보
                        테이블을 나누는게 필수가 아니다. 
                        컬럼수가 너무 많거나 기능적으로 보기에 
                        나누는게 낫다고 판단할때   
                 1:n    고객정보 - 구매정보 , 
                        무조건 나누어서 저장해야 메모리 낭비를 피한다 
                 n:m    거의 발생 안함 


select num, userid, groupname, price, amount
from buytbl 

select userid, name, addr 
from usertbl 

조인컬럼 : userid 

select num, buytbl.userid, groupname, price, amount, name, addr 
from buytbl 
inner join usertbl on buytbl.userid=usertbl.userid; 

-- 정석 
select num, A.userid, groupname, price, amount, name, addr 
from buytbl A 
inner join usertbl B on A.userid=B.userid;

select num, A.userid, groupname, price, amount, name, addr 
from buytbl A 
inner join usertbl B on A.userid=B.userid
where A.groupname in  ('서적', '전자');

-- 조인연산, 서브쿼리 연산, 사용자함수 

select  A.userid, name, groupname, price, amount, addr 
from usertbl B 
inner join buytbl A on A.userid=B.userid
order by A.userid;

select  distinct A.userid, name, groupname, price, amount, addr 
from usertbl B 
inner join buytbl A on A.userid=B.userid
order by A.userid;

select  distinct A.userid, name, addr 
from usertbl B 
inner join buytbl A on A.userid=B.userid
order by A.userid;

--usertbl 에 있는 아이디가 buytbl  에도 있어야 한다 
select  A.userid, name, addr 
from usertbl A 
where exists( 
    select 1 from buytbl B where A.userid=B.userid 
)

exists  구문은 서브쿼리 실행결과가 하나라도 있으면  true 로 인식하고 
하나도 없으면 false  로 인식한다. 

BBK
....
BBK
BBK
...
BBK
BBK

-- 한번도 구매 안한사람
select  A.userid, name, addr 
from usertbl A 
where not exists( 
    select 1 from buytbl B where A.userid=B.userid 
);

select 1 from buytbl B where B.userid='BBK';
select 1 from buytbl B where B.userid='EJW';
select 1 from buytbl B where B.userid='JKW';


+--------+--------+-----------+------+---------+---------+--------+------------+
| userID | name   | birthYear | addr | mobile1 | mobile2 | height | mDate      |
+--------+--------+-----------+------+---------+---------+--------+------------+
| BBK    | 바비킴 |      1973 | 서울 | 010     | 0000000 |    176 | 2013-05-05 |
| EJW    | 은지원 |      1972 | 경북 | 011     | 8888888 |    174 | 2014-03-03 |
| JKW    | 조관우 |      1965 | 경기 | 018     | 9999999 |    172 | 2010-10-10 |
| JYP    | 조용필 |      1950 | 경기 | 011     | 4444444 |    166 | 2009-04-04 |
| KBS    | 김범수 |      1979 | 경남 | 011     | 2222222 |    173 | 2012-04-04 |
| KKH    | 김경호 |      1971 | 전남 | 019     | 3333333 |    177 | 2007-07-07 |
| LJB    | 임재범 |      1963 | 서울 | 016     | 6666666 |    182 | 2009-09-09 |
| LSG    | 이승기 |      1987 | 서울 | 011     | 1111111 |    182 | 2008-08-08 |
| SSK    | 성시경 |      1979 | 서울 | NULL    | NULL    |    186 | 2013-12-12 |
| YJS    | 윤종신 |      1969 | 경남 | NULL    | NULL    |    170 | 2005-05-05 |


inner join : 두개의 테이블을 결합할때 교집합-서로 양쪽에 있는 내용만 
            결합을 한다. 

outer join: 

use sqldb;
create table stdtbl( 
  stdName nvarchar(10) not null primary key,
  -- 프라이머리 키가 필드 하나일때는 필드 옆에다 primary key 임을 기술
  -- 필드가 여러개일때는 모든 필드 선언 후 별도로  primary key를 선언한다 
  addr nvarchar(20) not null  
);

create table clubtbl(
  clubName nvarchar(10) not null primary key,
  roomNo   char(4) not null  
);

create table stdclubTbl(
  num int  AUTO_INCREMENT not null primary key, 
  -- AUTO_INCREMENT 설정된 필드는   primary  또는 unique  만 가능하다 
  stdName nvarchar(10) not null ,
  clubName nvarchar(10) not null
);

--외부키 추가 
alter table [추가할테이블명] add constraint 
[제약조건명] foreign key(컬럼명) 
references [부모테이블명] (PK컬럼명) 

alter table stdclubtbl add constraint 
FK_std_stdclub foreign key(stdName) 
references stdtbl(stdName);

alter table stdclubtbl add constraint 
FK_club_stdclub foreign key(clubName) 
references clubtbl(clubName);

insert into stdtbl values('김범수', '경남'), ('성시경', '서울'),
('조용필', '경기'), ('은지원', '경북'), ('바비킴', '서울');

-- delete from clubtbl;
insert into clubtbl values('수영', '101'), ('바둑', '102'),
('축구', '103'), ('봉사', '104');

-- delete from stdclubtbl;
insert into stdclubtbl values(null, '김범수', '바둑'),
(null, '김범수', '축구'), (null, '조용필', '축구'),
(null, '은지원', '봉사'), (null, '은지원', '축구'), 
(null, '바비킴', '봉사');

--세개의 테이블을 join 하기 

select A.stdname, A.addr,  B.clubname, C.roomno 
from stdtbl  A
inner join stdclubtbl B  on A.stdname=B.stdname
inner join clubtbl C     on B.clubname=C.clubname; 


select A.userid, A.name, A.addr, B.prodName
from usertbl A
inner join buytbl B on A.userid=B.userid;

select A.userid, A.name, A.addr, B.prodName
from usertbl A
left outer join buytbl B on A.userid=B.userid;

select A.userid, A.name, A.addr, B.prodName
from usertbl A
right outer join buytbl B on A.userid=B.userid;

-- 구매목록 없는 회원들 
select A.userid, A.name, A.addr, B.prodName
from buytbl B
right outer join usertbl A on A.userid=B.userid
where b.prodname is null;

select A.stdname, A.addr, B.clubName, C.roomNo
from stdtbl A 
left outer join stdclubtbl B on A.stdName=B.stdName 
left outer join clubtbl C on B.clubName = C.clubName;


select A.userid, prodname
from buytbl A
cross join usertbl B;

use employees;
select count(*) from employees cross join titles;

테이블의 구조 변경 
ALTER TABLE emp 
ADD constraint PK_EMP PRIMARY KEY (empno);

1.
--dept테이블에  PK_DEPT 라는 이름으로    deptno 에 primary key

ALTER TABLE dept
ADD constraint PK_DEPT PRIMARY KEY (deptno);

2.
emp   테이블의 deptno 가  dept 테이블의 deptno 참조하도록 
외부키 추가하기 
alter table emp add constraint 
FK_emp_dept foreign key(deptno) 
references dept(deptno);

3. 사원번호, 사원명, 부서명, 급여 항목을 출력하시오 
select empno, ename, dname, sal 
from emp A 
left outer join dept B on A.deptno=B.deptno;

emp 테이블의 mgr에 자기 상사의 사원번호가 
select empno, mgr, ename, 상사의이름 from emp;

A -  내사원번호, 내이름, 상사의사원번호 
B -  상사의이름(상사의사원번호)

selec A.empno, A.ename, A.mgr, B.ename 
from emp A 
left outer join emp B on A.mgr=B.empno;

통합검색 - 테이블들이 100개씩

use sqldb;
create table prodTbl( id int AUTO_INCREMENT not null primary key,
prodName nvarchar(20));

insert into prodTbl values(null, '전자'), (null, '섬유'), 
(null, '의류'), (null, '잡화'), (null, '휴대폰');

select num, prodname 
from buytbl 
where groupname ='전자'
union all 
select id, prodname 
from prodtbl 
where prodname ='전자';

테이블의 행과 열을 바꿀때 union 을 사용한다 

select * from employees where empno=90000;
처음부터 하나씩 읽어나간다 데이타 나올때까지 (순차검색)
데이터가 천만건이 있으면 재수없으면 천만번 비교해봐야 한다 

                       500만건 
색인순차검색 - primary key 를 지정하면 인덱스를 자동 생성한다 


--회원아이디에 유니크 제약조건을 준 회원테이블 만들기 
create table member (
  member_id int not null AUTO_INCREMENT primary key,
  user_id varchar(20) unique,
  password varchar(20) not null, 
  username varchar(20) not null
);

insert into member values(null, 'test1', '1234', '익명1');
insert into member values(null, null, '1234', '익명2');
insert into member values(null, 'test1', '1234', '익명3');

drop table member;
create table member (
  member_id int not null AUTO_INCREMENT primary key,
  user_id varchar(20) unique,
  password varchar(20) not null, 
  username varchar(20) not null,
  gender char(1) check( gender in ( 'Y', 'N'))
);

insert into member values(null, 'test1', '1234', '홍길동', 'Y');
insert into member values(null, 'test2', '1234', '황진이', 'N');
insert into member values(null, 'test3', '1234', '벽계수', 'M');

--  member 컬럼 추가 
alter table member add column email varchar(50);

-- 컬럼삭제 
alter table member drop column password;

alter table member change column username uname nvarchar(30);

alter table usertbl drop primary key; 

show indexs buytbl;
alter table buytbl drop FOREIGN key buyTbl;

use mydb;

select A.empno, A.ename, A.deptno, B.dname, A.hiredate, A.sal 
from emp A 
left outer join dept B  on A.deptno=B.deptno;

create view v_emp as 
  select A.empno, A.ename, A.deptno, B.dname, A.hiredate, A.sal 
  from emp A 
  left outer join dept B  on A.deptno=B.deptno;

select * from(
  select A.empno, A.ename, A.deptno, B.dname, A.hiredate, A.sal 
  from emp A 
  left outer join dept B  on A.deptno=B.deptno
)A;

select * from v_emp;
select * from v_emp 
where deptno=10;

select deptno, count(*) cnt
from v_emp 
group by deptno;

grant all mydb.* to user01@localhost identified by  패스워드 

계정 - root  테이블들을 막 만든다 
             뷰도 만든다.   


create or replace view v_emp as 
  select A.empno, A.ename, A.deptno, B.dname, 
  A.hiredate hdate, A.sal MonthPay, A.sal*12 YearPay 
  from emp A 
  left outer join dept B  on A.deptno=B.deptno;

drop view v_emp; 

무료 호스팅업체 -  git, firebase(구글), ....
유료 호스팅업체 -  cafe24,  후이즈, 파이썬 애니웨어 
                 phpmysql - 웹을 이용해서 mysql 접근 툴  
use sqldb;
select `userid` from usertbl;
use sqldb;
create view v_userbuytbl 
as select u.userid, u.name, b.prodname, u.addr, 
concat(u.mobile1, u.mobile2) as mobile
from usertbl u
inner join buytbl b;

-- 뷰에 데이터 넣기 - 뷰가 두개이상의 테이블을 join해 올때는 
-- dml  동작안함 
insert into v_userbuytbl (userid, name, addr)
values('aaa', '홍길동', '광주');
error : The target table v_userbuytbl of the INSERT is not insertable-into

-- 실제원테이블 확인
select * from usertbl; 

만약에 뷰에서 실제테이블을 안보여줘서 not null  조건있는 필드를 
못본다면 insert  못해 

create view v_usertbl 
as select userid, name, addr from usertbl;

insert into v_usertbl (userid, name, addr)
values('aaa', '홍길동', '광주');

select * from usertbl; 

show variables like 'innodb_data_file_path';

show variables like 'innodb_file_per_table';

--새로운 테이블 스페이스 만들기 
create tablespace ts_a add datafile ts_a.ibd;
create tablespace ts_b add datafile ts_b.ibd;
create tablespace ts_c add datafile ts_c.ibd;

순차검색(선형검색, linear search)
- 처음부터 하나씩 읽어서 원하는 데이터나올때까지 
- 속도가 젤 느리다. n의 속도 

색인순차검색 - ISAM 
색인표를 만들어서 처음 검색은 색인을 찾아서 
색인 찾은 다음에는 순차검색으로  log N 

해쉬검색 -파이썬  dict 타임 
해쉬함수를 이용해서 데이터를 이론상 한번에 검색한다 

컴퓨터는 속도와 메모리는 반비례한다 

trade off - 적정선을 찾는것 (중용)


-- 데이터베이스 사전 

show databases;
use information_schema;
show tables;

select * from tables;
desc tables;

select  TABLE_SCHEMA, TABLE_NAME ,table_TYPE
from tables
where table_schema = 'sqldb';

use employees;
alter table employees drop primary key 

use information_schema;
desc table_constraints;
-- 테이블에 제약조건 있을때 확인 명령어 
select * from table_constraints
where table_name='employees';

use employees;
select  CONSTRAINT_NAME from information_schema.table_constraints
where table_name='employees';

alter table employees drop primary key;

select  * 
from information_schema.table_constraints
where table_schema='employees';


--현재 나를 참조하는 테이블 확인 명령어   
select table_name, column_name, referenced_table_name,
referenced_column_name 
from information_schema.key_column_usage
where referenced_table_name='employees';

alter table dept_emp drop FOREIGN key dept_emp_ibfk_1;
alter table dept_emp drop FOREIGN key dept_emp_ibfk_2;
alter table dept_manager drop foreign key dept_manager_ibfk_1;
alter table salaries drop foreign key salaries_ibfk_1;
alter table titles drop foreign key titles_ibfk_1;
alter table employees drop primary key;

-- 프라이머리키 삭제하고 속도 확인 
select max(emp_no) from employees;
select * from where emp_no = 400000; 0.14초 

-- primary key를 다시 추가해보자 -- 자동인덱스
alter table employees add constraint PK_EMP primary key(emp_no);
select * from employees where emp_no = 400000; 0.0초



/*
dept_emp_ibfk_1   dept_emp
dept_emp_ibfk_2
*/



















                                  



















































































